package org.cipres.treebase.domain.nexus;

import java.util.List;
import java.util.StringTokenizer;

import org.cipres.treebase.dao.AbstractDAOTest;
import org.cipres.treebase.domain.matrix.Matrix;
import org.cipres.treebase.domain.matrix.MatrixDataTypeHome;
import org.cipres.treebase.domain.nexus.ncl.NCLNexusConverter;
import org.cipres.treebase.domain.taxon.TaxonLabel;
import org.cipres.treebase.domain.taxon.TaxonLabelHome;
import org.cipres.treebase.domain.tree.PhyloTree;

/**
 * The class <code>NexusNCLDataSetTest</code> contains tests for the class {@link
 * <code>NexusDataSet</code>}
 * 
 * @pattern JUnit Test Case
 * 
 * @generatedBy CodePro at 6/8/06 10:21 AM
 * 
 * @author Jin Ruan
 * 
 * @version $Revision$
 */
public class NexusNCLDataSetTest extends AbstractDAOTest {

	private NexusDataSet fixture = new NexusDataSet();

	private TaxonLabelHome mTaxonLabelHome;
	private MatrixDataTypeHome mMatrixDataTypeHome;

	/**
	 * Return the object that is being tested.
	 * 
	 * @return the test fixture
	 * 
	 * @see org.cipres.treebase.domain.nexus.NexusDataSet
	 */
	public NexusDataSet getFixture() {
		return fixture;
	}

	/**
	 * Set the object that is being tested.
	 * 
	 * @param fixture the test fixture
	 */
	private void setFixture(NexusDataSet fixture) {
		this.fixture = fixture;
	}

	/**
	 * Return the TaxonLabelHome field.
	 * 
	 * @return TaxonLabelHome mTaxonLabelHome
	 */
	private TaxonLabelHome getTaxonLabelHome() {
		return mTaxonLabelHome;
	}

	/**
	 * 
	 * @param pTaxonLabelHome
	 */
	public void setTaxonLabelHome(TaxonLabelHome pTaxonLabelHome) {
		mTaxonLabelHome = pTaxonLabelHome;
	}

	/**
	 * Return the MatrixDataTypeHome field.
	 * 
	 * @return MatrixDataTypeHome mMatrixDataTypeHome
	 */
	private MatrixDataTypeHome getMatrixDataTypeHome() {
		return mMatrixDataTypeHome;
	}

	/**
	 * Set the MatrixDataTypeHome field.
	 */
	public void setMatrixDataTypeHome(MatrixDataTypeHome pNewMatrixDataTypeHome) {
		mMatrixDataTypeHome = pNewMatrixDataTypeHome;
	}

	/**
	 * 
	 * Creation date: Jun 8, 2006 10:26:17 AM
	 */
	public void testNewickParsing() {
		String newick = "(21,(20,(((((19,18,17,16),15,14,13,12,11),10,9,8,7,6,5),((3,2),1)),4)));";
		String delim = "(),: ";
		StringBuffer newick2 = new StringBuffer();
		PhyloDataSetProvider datasetM1389 = new PhyloDataSetM1389();

		int taxaSize = datasetM1389.getTaxaLabels().size();

		System.out.println("NexusNCLDataSetTest:newickParsingTest: ");
		System.out.println("newick: " + newick);

		StringTokenizer st = new StringTokenizer(newick, delim, true);
		while (st.hasMoreTokens()) {
			String element = st.nextToken();
			int i = -1;
			boolean isNumber = false;
			try {
				// Notes: NCL parsed output is 1 based.
				i = Integer.parseInt(element) - 1;
				if (i >= 0 && i < taxaSize) {
					isNumber = true;
				}

			} catch (NumberFormatException ex) {
				isNumber = false;
			}

			if (isNumber) {
				newick2.append(datasetM1389.getTaxaLabels().get(i));
			} else {
				newick2.append(element);
			}
		}

		System.out.println("newick2: " + newick2.toString());

	}

	/**
	 * 
	 * Creation date: Jun 14, 2006 8:15:55 PM
	 */
	public void testM1389Parsing() {

		String dataName = "m1389";
		PhyloDataSetProvider datasetM1389 = new PhyloDataSetM1389();

		parseTest(dataName, datasetM1389);
	}

	/**
	 * 
	 * Creation date: Jun 14, 2006 8:15:55 PM
	 */
	public void testM12c11Parsing() {

		String dataName = "m12c11";
		PhyloDataSetProvider dataset = new PhyloDataSetM12c11();

		parseTest(dataName, dataset);

	}

	/**
	 * 
	 * @param pCipresDataSet
	 */
	@SuppressWarnings("unused")
	private void parseTest(String pDataName, PhyloDataSetProvider pCipresDataSet) {
		StringBuffer newick2 = new StringBuffer();

		System.out.println(pDataName + " Parsing: ");

		NexusDataSet nexusData = new NexusDataSet();

		NCLNexusConverter converter = new NCLNexusConverter();
		converter.setMatrixDataTypeHome(getMatrixDataTypeHome());
		converter.setTaxonLabelHome(getTaxonLabelHome());
		converter.parsePhyloDataSet(null, nexusData, pCipresDataSet.getCipresData());
		
		List<TaxonLabel> taxonLabels = nexusData.getTaxonLabels();
		List<PhyloTree> trees = nexusData.getPhyloTrees();
		List<Matrix> matrices = nexusData.getMatrices();

		// verify parsing.
		pCipresDataSet.verify(nexusData);

		System.out.println("   " + pDataName + " parsing done: ");
	}

	public static void main(String[] args) {
		NexusNCLDataSetTest test = new NexusNCLDataSetTest();
		test.testNewickParsing();

		System.exit(0);
	}
}

/*
 * $CPS$ This comment was generated by CodePro. Do not edit it. patternId =
 * com.instantiations.assist.eclipse.pattern.testCasePattern strategyId =
 * com.instantiations.assist.eclipse.pattern.testCasePattern.junitTestCase additionalTestNames =
 * assertTrue = false callTestMethod = true createMain = false createSetUp = false createTearDown =
 * false createTestFixture = true createTestStubs = false methods = package =
 * org.cipres.treebase.domain.nexus package.sourceFolder = treebase-core/src/test/java
 * superclassType = junit.framework.TestCase testCase = NexusNCLDataSetTest testClassType =
 * org.cipres.treebase.domain.nexus.NexusDataSet
 */