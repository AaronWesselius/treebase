#!/usr/bin/perl

use strict;
use CIPRES::TreeBase::DBIUtil;
use Getopt::Std;
use File::Basename 'basename';
use POSIX ':sys_wait_h'; # for WIFEXITED, WEXITSTATUS, etc.
use POSIX ':fcntl_h';  # For O_RDWR and O_CREAT

my $HOME = "/users/u4/mjd";

my %opt = (
    W => 100,
    t => 600, 
    'y' => "DONE",
    n => "FAILED",
    c => "$HOME/trunk/treebase-core/target/classes",
    1 => "/dev/null", 2 => next_file("matrix.%02d.log"),
    );
getopts('W:c:t:n:y:h', \%opt) or usage();
if ($opt{h}) { die "Sorry, unimplemented.\n"; }
if ($opt{1}) {
  open STDOUT, ">>", $opt{1} or die "stdout $opt{1}: $!";
}
if ($opt{2}) {
  open STDERR, ">>", $opt{2} or die "stderr $opt{2}: $!";
}

my %DONE;
my $done = load_already_done($opt{y}, \%DONE);
open my($failed), ">>", $opt{n} or die "$opt{n}: $!";

my @FILES = <>;
chomp @FILES;
warn "Input mentions ", @FILES+0, " files in all\n";
@FILES = grep ! $DONE{basename($_)}, @FILES;
warn @FILES+0, " are possibly not done yet\n";

my $width = $opt{W};
while ($width > 0) {
    warn "Starting pass on groups of $width files\n";
    my @files = @FILES;
    while (@files) {
	my @file_batch = splice(@files, 0, $width);
	my $N = @file_batch;
	my $status_ok = do_files(@file_batch);
	if ($status_ok) {
	    warn "$N files from $file_batch[0] complete.\n";
	    print $done join "\n", @file_batch, "\n";
	} else {
	    warn "$N files from $file_batch[0] complete.\n";
	    print $failed $file_batch[0], "\n" if @file_batch == 1;
	}
    }
    $width = int($width/2);
}

sub load_already_done {
  my $f = shift;
  local *DONE = shift;
  sysopen(my($fh), $f, O_RDWR | O_CREAT, 0666)
    or die "$f: $!";
  my @files = <$fh>;
  chomp @files;
  $DONE{basename($_)} = 1 for @files;
  return $fh;
}

sub do_files {
  my @files = @_;
  my $pid = fork();
  die "fork: $!" unless defined $pid;
  if ($pid == 0) {		# child process
    $SIG{ALRM} = "DEFAULT";
    alarm($opt{t});
    chdir($opt{c}) or die "chdir($opt{c}): $!";

    exec("jrun",
	 "-D",
	 "M2_REPO=$ENV{HOME}/.m2/repository",
	 "org.cipres.treebase.util.BulkUpload",
	 @files,
	);

    die "exec: $!";
  } else {			# parent process
    my $rc = wait();
    if (WIFEXITED($rc)) {
      my $es = WEXITSTATUS($rc);
      if ($es != 0) {
	warn "child for @files failed with exit status $es\n" if $es != 0;
      } else {
	return 1; 		# success!
      }
    } elsif (WIFSIGNALED($rc)) {
      warn "child for @files killed by signal " . WTERMSIG($rc) . "\n";
    } else {
      warn "child for @files has incomprehensible exit status $rc\n";
    }
    return;			# failure!
  }
}

sub next_file {
  my $pat = shift;
  my $dir = shift || ".";
  my $N = shift || 1;
  my $file;
  while (1) {
    my $basefile = sprintf($pat, $N);
    $file = join "/", $dir, $basefile;
    last if ! -e $file;
    $N++;
  }
  return $file;
}
