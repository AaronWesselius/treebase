#!/usr/bin/perl

use CIPRES::TreeBase::DBIUtil;
use CIPRES::TreeBase::RecDumper;
use Getopt::Long;
use Pod::Usage;
use strict;

my @tables; # database table to dump out
my $outhandle = \*STDOUT;      # handle to write dump to
my $with_progress_meter = 0;   # switch to print a progress meter
my $with_inserts = 1;          # write insert statements
my $with_creates = 0;          # write create statements
my $name_file_after_table = 0; # name output file after table
my $schema = 'TBASE2';         # name of schema to analyze
my $zip = 0;                   # zip output
my $test = 0;                  # test run: delete produced files
my $nrecs;                     # max number of recs per table
my $where = "";                # WHERE clause to select dumped records
my $maxlen = 5 * 1024 * 1024;  # Maximum field length: 5 MB by default

# get command line options, see Getopt::Long
GetOptions(
    'name-after-table' => \$name_file_after_table,
    'creates!'  => \$with_creates,
    'inserts!'  => \$with_inserts,
    'progress!' => \$with_progress_meter,
    'user=s'    => \$ENV{'TREEBASE_DB_USER'},
    'pass=s'    => \$ENV{'TREEBASE_DB_PASS'},
    'dsn=s'     => \$ENV{'TREEBASE_DB_DSN'},
    'table=s'   => \@tables,
    'zip'       => \$zip,
    'maxlen=i'  => \$maxlen,
    'test'      => \$test,
    'nrecs=i'   => \$nrecs,
    'where=s'   => \$where,
    'all'       => sub { @tables = get_all_tables() },
    'help|?'    => sub { pod2usage( '-verbose' => 0 )  }, # see Pod::Usage
    'man'       => sub { pod2usage( '-verbose' => 1 )  }, # see Pod::Usage
    'schema=s'  => sub { @tables = get_all_tables(pop) },
    'file=s'    => sub {
        my $file = pop;
        open my $fh, '>', $file 
            or pod2usage( 
                '-msg'     => "Couldn't write output file '$file': $!; aborting",
                '-verbose' => 0,
                '-exitval' => 1 
            ); # see Pod::Usage
        $outhandle = $fh;
    },  
) || pod2usage( '-verbose' => 0, '-exitval' => 1 );

# need at least one table, see Pod::Usage
pod2usage( 
    '-verbose' => 0, 
    '-exitval' => 1, 
    '-msg'     => 'Need at least one table to dump, aborting' 
) unless @tables;

# need at least one action, see Pod::Usage
pod2usage(
    '-verbose' => 0, 
    '-exitval' => 1, 
    '-msg'     => 'Need at least one operation to write out (--inserts and/or --creates), aborting'
) unless $with_creates or $with_inserts;

# prepend $where clause with WHERE unless it has that already,
# or there was none.
$where = "WHERE $where" unless $where =~ /^\s*$/ || $where =~ /^\s*where\b/i;

{
    # create database handle
    my $dbh = get_handle();
    $dbh->{LongReadLen} = $maxlen;  # Handle LOBs up to $maxlen bytes
    
    for my $table ( @tables ) {

        my @names = CIPRES::TreeBase::DBIUtil::get_colnames($dbh, $table); 
        my @types = CIPRES::TreeBase::DBIUtil::get_coltypes($dbh, $table);

        # instantiate a RecDumper object, which will format a row-as-array
        # into an insert statement
        my $dumper = CIPRES::TreeBase::RecDumper->new(
            'FIELDS' => \@names,
            'TYPES'  => \@types,
            'TABLE'  => $table
        ) or die "Couldn't instantiate CIPRES::TreeBase::RecDumper";
        
        # give dumper the output handle to write to, i.e. either STDOUT,
        # or a file specified on the command line, or the table name...
        if ( $name_file_after_table ) {
            close $outhandle;
            open my $fh, '>', "${table}.sql" or die $!;
            $outhandle = $fh;
        }
        # ...or a compressed file
        elsif ( $zip ) {
            close $outhandle;
            open my $ziph, "| gzip -9 > ${table}.gz" or die $!;
            $outhandle = $ziph;
        }
        $dumper->set_output($outhandle);
        
        # write create table statements
        if ( $with_creates ) {
            $dumper->dump_create;       
        }
        
        # write insert statements
        if ( $with_inserts ) {
            eval {
                print_insert_statements ($dumper, $dbh, $table);
                if ( $test ) {
                    for ( qw(gz sql) ) {
                        if ( -e "${table}.${_}" ) {
                            unlink "${table}.${_}";
                        }
                    }
                }
            };
            if ( $@ ) {
                print STDERR "Table ${table} failed: $@\n";
		$dumper->dump_create;
            }
        }
    }
    
    # disconnect from database
    $dbh->disconnect;
    exit 0;
}

sub get_all_tables {
    my $schema_to_analyze = shift || $schema;
    my $dbh = get_handle();
    my $sth = $dbh->prepare(
        sprintf(
            q{select tabname from syscat.tables where tabschema = '%s'}, 
            $schema_to_analyze
        )
    );
    my @fetched_tables;
    $sth->execute();
    while ( my $row = $sth->fetchrow_hashref ) {
        push @fetched_tables, $row->{'TABNAME'};            
    }
    return @fetched_tables;
}

sub get_handle {
    my $dbh = CIPRES::TreeBase::DBIUtil->dbh
        or die "Couldn't connect to database: " . DBI->errstr;
    $dbh->{'RaiseError'} = 1;   
    return $dbh;
}

sub print_insert_statements {
    my ( $dumper, $dbh, $table ) = @_;

    # get all rows from $table
    my $q   = qq{select * from $table};
    $q .= "  " . $where if $where;
    my $sth = $dbh->prepare($q);
    $sth->execute();

    my $row;
    my $rows_printed = 0;

    # if --progress is provided, print out progress counter
    if ($with_progress_meter) {
	my ($total_records) = @{$dbh->selectcol_arrayref(qq{select count(*) from $table})};
	$total_records = $nrecs if defined($nrecs) && $nrecs < $total_records;
        my $count = 0;
	my $old_percent = "";
        while ( $row = $sth->fetchrow_arrayref ) {
            ++$count;
            $dumper->rec(@$row);
	    my $percent = int(0.5 + $count / $total_records * 100);
            print STDERR "\r$percent%" if $percent ne $old_percent;
	    $old_percent = $percent;
	    ++$rows_printed;
	    last if defined($nrecs) && $rows_printed >= $nrecs;
        }
    }

    # if --noprogress or default, just dump the records
    else {
        while ( $row = $sth->fetchrow_arrayref ) {
            $dumper->rec(@$row);
	    ++$rows_printed;
	    last if defined($nrecs) && $rows_printed >= $nrecs;
        }
    }

    if ($rows_printed == 0) {
	$dumper->print("-- empty table\n");
    }

    # finish the statement handler
    $sth->finish();

    # add line break if we\'re printing a progress counter
    print STDERR "\n" if $with_progress_meter;
}
