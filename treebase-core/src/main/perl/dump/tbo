#!/usr/bin/perl

use strict;
use CIPRES::TreeBase::DBIUtil;
use CIPRES::TreeBase::TreeBaseObjects;
use Getopt::Std;

my %opt;
getopts('', \%opt) or usage();

my $dbh = CIPRES::TreeBase::DBIUtil->dbh
  or die "Couldn't connect to database: " . DBI->errstr;
CIPRES::TreeBase::TreeBaseObjects->set_db_connection($dbh);

my $it;
while (1) {
  print "tbo> ";
  my $in = <>;
  chomp($in);
  last unless $in =~ /\S/;
  trim($in);
  if ($in eq "dump") {
    Dump($it);
    next;
  }
  my @vals;
  { no strict 'vars';
    @vals = eval($in);
  }
  if ($@) {
    warn "$@\n";
  } else {
    if (@vals == 1) {
      $it = $vals[0];
      print UNIVERSAL::can($it, 'to_str') ? $it->to_str : $it, "\n";
    } else {
      for my $i (0 .. $#vals) {
	print "$i : ", UNIVERSAL::can($vals[$i], 'to_str') ? $vals[$i]->to_str : $vals[$i], "\n";
      }
      $it = \@vals;
    }
  }
}

sub trim {
  for (@_) {
    s/^\s+//;
    s/\s+$//;
  }
}


sub Dump {
  my $v = shift;
  $v->reify if UNIVERSAL::can($v, 'reify');

  my $c1 = max(map length(), keys %$v);

  for my $k (sort keys %$v) {
    my $r = defined($v->{$k}) ? $v->{$k} : "(undef)";
    print fill($c1, $k), " $r\n";
  }
}

sub max {
  my $m = shift;
  $m = $m > $_ ? $m : $_ for @_;
  return $m;
}

sub fill {
  my ($n, $s) = @_;
  return length($s) > $n ? $s : $s . " " x ($n - length($s));
}
