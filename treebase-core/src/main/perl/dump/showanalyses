#!/usr/bin/perl

use strict;
use CIPRES::TreeBase::DBIUtil;
use Getopt::Std;

my %opt;
getopts('', \%opt) or usage();

my $study_id = shift || usage();

my $dbh = CIPRES::TreeBase::Util->dbh
  or die "Couldn't connect to database: " . DBI->errstr;

for my $analysis_row (query("analysis", "study_id", $study_id)) {
    my $a_id = $analysis_row->{ANALYSIS_ID};
    print "  Analysis $a_id:\n";
    for my $analysisstep_row (query("analysisstep", "analysis_id", $a_id)) {
	my $as_id = $analysisstep_row->{ANALYSISSTEP_ID};
	print "    Step $as_id:\n";
	for my $analyzeddata_row (query("analyzeddata", "analysisstep_id", $as_id)) {
	    my $ad_id = $analyzeddata_row->{ANALYZEDDATA_ID};
	    my $type = $analyzeddata_row->{TYPE};
	    my $Type = {M => "matrix", T => "phyloTree"}->{$type};
	    my $input = $analyzeddata_row->{INPUT} ? "input" : "output";
	    my $d_id = $analyzeddata_row->{"\U$Type\E_ID"};
	    my $nameField = {M => "TITLE", T => "LABEL"}->{$type};
	    print "      Data $ad_id ($input):\n";
#	    print "            ", join " ", %$analyzeddata_row;

	    for my $row (query($Type, $Type . "_id", $d_id)) {
		my $s_id = $row->{STUDY_ID};
		my $ERR = "";
		if (! defined $s_id) {
		    $ERR = "(no study!) ";
		} elsif ($s_id != $study_id) {
		    $ERR = "(study s_id) ";
		}
		if ($type eq "T" && not defined $row->{TREEBLOCK_ID}) {
		    $ERR .= "(no treeblock!) "
		}
		
		my $spc = $ERR ? "**" : "  ";
		print " $spc     \u$Type $d_id: $ERR'$row->{$nameField}'\n";
	    }
	}
    }
}

$dbh->disconnect;

################################################################

sub usage {
    print "$0 [-tb] tree-id\n";
    print "\t-t : check taxonlabels\n";
    print "\t-b : check treeblocks\n";
    exit 1;
}

################################################################

sub query {
    my ($table, $qcolumn, $qvalue) = @_;
    unless (defined $qcolumn) {
	$qcolumn = $table . "_id";
    }
    my $sth = $dbh->prepare_cached("select * from $table where $qcolumn = ?");
    $sth->execute($qvalue);
    my @rows;
    while (my $row = $sth->fetchrow_hashref()) {
	push @rows, $row;
    }
    $sth->finish;
    return @rows;
}
