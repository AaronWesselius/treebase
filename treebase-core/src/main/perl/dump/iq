#!/usr/bin/perl
# -*- cperl -*-

use CIPRES::TreeBase::DBIUtil;
use Getopt::Std;
use Text::ParseWords;

my $dbh = CIPRES::TreeBase::DBIUtil->dbh
  or die "Couldn't connect to database: " . DBI->errstr;
$dbh->{RaiseError} = undef;
$dbh->{PrintError} = 'on';

my %opt = (e => $ENV{IQEDITOR} || $ENV{VISUAL} || $ENV{EDITOR} || "vi",
	   m => 20,
	   n => "--",
	   );
getopts('e:m:n:', \%opt) or usage();

my $query = "";
my $sth;
my $editor = $opt{e};
my $maxrows = $opt{m};
my @rows;

while (1) {
#  print $query, "\n" if $query;
  print "> ";
  my $r = <>;
  trim($r);
  last if $r eq "";

  if ($r eq "e") {
    $query = edit($query);
    print "$query\n";
    $sth = maybe_run_query($query);
  } elsif (my ($pat, $rep, $g) = ($r =~ m{s/(.*)/(.*)/(g?)})) {
    if ($g) {
      $query =~ s/$pat/$rep/g;
    } else {
      $query =~ s/$pat/$rep/;
    }
    $sth = maybe_run_query($query);
  } elsif ($r =~ s/^x\s*//) {
    (my $q = $query) =~ tr/\n/ /;
    compile_query($query) unless defined $sth;
    run_query($sth, shellwords($r));
  } elsif ($r eq "p") {
    print_aoh(\@rows, $opt_n);
  } elsif ($r =~ s/^w\s*//) {
    if (open my($f), ">", $r) {
      my $ofh = select $f;
      print_aoh(\@rows, $opt_n);
      select $ofh;
    } else {
      warn "Couldn't open '$r' for writing: $!\n";
    }
  } else {
    $query = $r;
    $sth = maybe_run_query($query);
  }
}

exit;

################################################################

sub compile_query {
  my $query = shift;
  $query =~ tr/\n/ /;
  my $_sth;
  eval {
    $_sth = $dbh->prepare($query);
  };
  if ($_sth) {
    $sth = $_sth;
  } else {
    warn $dbh->errstr . "\n";
  }
  return defined($_sth);
}

sub maybe_run_query {
  eval {
    my $query = shift;
    compile_query($query) or return;

    return unless $sth->{NUM_OF_PARAMS} == 0;


    run_query($sth);
    return $sth;
  };
}

sub run_query {
  my $sth = shift;
  return unless defined $sth;
  my @params = @_;
  my @_rows;

  warn "Executing...\n";
  $sth->execute(@params) or return;
  while (my $row = $sth->fetchrow_hashref) {
    push @_rows, {%$row};
  }


  $sth->finish;
  if (@_rows == 0) {
    print "Empty result.\n";
    return;
  } elsif (@_rows <= $maxrows) {
    print_aoh(\@rows, $opt_n);
  } else {
    print "result: " . @_rows . " rows; use 'p' to display\n";
  }
  @rows = @_rows;
}

sub edit {
  my $tmp = "/tmp/iq.$$";
  my $data = shift;
  $data .= "\n" unless $data =~ /\n\z/;
  open my($f), ">", $tmp or die "Couldn't write temp file '$tmp': $!";
  print $f $data;
  close $f;
  if (system($editor, $tmp) == 0) {
    open my($f), "<", $tmp or die "Couldn't read modified temp file '$tmp': $!";
    $data = join "", <$f>;
  } else {
    warn "Editor failed; ignoring changes\n";
  }
  unlink $tmp;
  return $data;
}

sub trim {
  $_[0] =~ s/^\s+//;
  $_[0] =~ s/\s+$//;
}
