#!/usr/bin/perl

use strict;
use CIPRES::TreeBase::DBIUtil;
use Getopt::Std;

my %opt;
getopts('tb', \%opt) or usage();

my $tree_id = shift || usage();

my $dbh = CIPRES::TreeBase::DBIUtil->dbh
  or die "Couldn't connect to database: " . DBI->errstr;

my $tree = PhyloTree->new($tree_id) or die "Can't get tree; aborting";
unless (defined $tree->{STUDY_ID}) {
    warn "Tree has no study ID\n";
}

my $q = "SELECT name, phylotreenode_id as id,
         leftnode as left, rightnode as right, phylotree_id as tree,
         child_id as child, sibling_id as sibling, taxonlabel_id
          FROM phylotreenode
          where phylotree_id = ?
";

my $sth = $dbh->prepare($q)
  or die "Couldn't prepare statement: " . $dbh->errstr;
my $rc = $sth->execute($tree_id)
  or die "Couldn't execute statement: " . $dbh->errstr;


my %NODE;
while (my $row = $sth->fetchrow_hashref) {
  $NODE{$row->{ID}} = Node->new(%$row);
}

unless (%NODE) {
  warn "No nodes in tree.\n";
  exit;
}

my $root;
for my $n (values %NODE) {
  $root ||= $n;
  if (defined $n->{CHILD}) {
    $n->{CHILD} = $NODE{$n->{CHILD}};
    for (my $c = $n->{CHILD};
	    $c;
            $c = $c->{SIBLING}) {

      $c->{SIBLING} = $NODE{$c->{SIBLING}} if defined $c->{SIBLING};
      $c->{PARENT} = $n;
    }
  }
}
$root = $root->{PARENT} while $root->{PARENT};

$root->show();
$dbh->disconnect;

################################################################

sub usage {
    print "$0 [-tb] tree-id\n";
    print "\t-t : check taxonlabels\n";
    print "\t-b : check treeblocks\n";
    exit 1;
}

################################################################

package Node;

sub new {
  my ($class, %attr) = @_;
  bless \%attr => $class;
}

sub show {
  my $self = shift;
  my $prefix = shift || "";

  my $good = $self->check();
  my $stars = $good ? "" : " * * * ";
  print "$prefix$stars$self->{ID}: $self->{NAME}$stars";
  print " ($self->{LEFT}, $self->{RIGHT})" if $self->{LEFT} != 0 || $self->{RIGHT} != 0;
  print "\n";
  for (my $child = $self->{CHILD};
          $child;
          $child = $child->{SIBLING}) {
    $child->show("$prefix| ");
  }
}

sub check {
    my $self = shift;
    my $good = 1;
    $good &&= $self->check_taxonlabels() if $opt{t};
    $good &&= $self->check_treeblocks()  if $opt{b};
    $good &&= $self->{TREE} == $tree_id;
    return $good;
}

sub check_taxonlabels {
    my $self = shift;
    my $tlid = $self->{TAXONLABEL_ID};
    return 1 unless defined $tlid;
    my $tl = TaxonLabel->new($tlid);
    if ($self->{NAME} ne $tl->{TAXONLABEL}) {
	$self->{NAME} .= " ('$tl->{TAXONLABEL}')";
    }
    if (defined $tree->{STUDY_ID}) {
	return 0 unless $tl->{STUDY_ID} == $tree->{STUDY_ID};
    }
    return 1;
}

sub forall {
  my $self = shift;
  my $cb = shift;
  $cb->($self);
  for (my $child = $self->{CHILD};
          $child;
          $child = $child->{SIBLING}) {
    $child->forall($cb);
  }
}

sub count {
  my $self = shift;
  my $N = 0;
  $self->forall(sub { $N++ });
  return $N;
}

package TaxonLabel;

sub new {
    my ($class, $id) = @_;
    my $sth2 = $dbh->prepare_cached("select * from taxonlabel where taxonlabel_id = ?");
    $sth2->execute($id) or return;
    my $self = $sth2->fetchrow_hashref();
    $sth2->finish();
    return unless $self;
    return bless $self => $class;
}

package PhyloTree;

sub new {
    my ($class, $id) = @_;
    my $sth2 = $dbh->prepare_cached("select * from phylotree where phylotree_id = ?");
    $sth2->execute($id) or return;
    my $self = $sth2->fetchrow_hashref();
    $sth2->finish();
    return unless $self;
    return bless $self => $class;
}
