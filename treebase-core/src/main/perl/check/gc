#!/usr/bin/perl

use strict;
use CIPRES::TreeBase::DBIUtil;
use CIPRES::TreeBase::TreeBaseObjects;
use Getopt::Std;
use Carp 'croak';

# $seen{$class}{$id} is 0 if the object was in the DB but unreferenced
#                       1 if the object was in the DB and referenced
my %SEEN = ();
my $count = 0;

my $dbh = CIPRES::TreeBase::DBIUtil->dbh
  or die "Couldn't connect to database: " . DBI->errstr;
CIPRES::TreeBase::TreeBaseObjects->set_db_connection($dbh);

my @CLASSES = qw(Analysis AnalysisStep AnalyzedData
		  Matrix MatrixRow
		  PhyloTree PhyloTreeNode
		  Study
		  TaxonLabel
		  );


for my $class (@CLASSES) {
    for my $id (get_all_ids($class)) {
      $SEEN{$class}{$id} = 0;
    }
    warn "Database contains ", scalar(keys %{$SEEN{$class}}), " $class items\n";
}

for my $study (map {Study->new($_)} keys %{$SEEN{Study}}) {
  next if $SEEN{Study}{$study->id}++;
  my $N = $study->analyzed_data;
  my $PREFIX = "S" . $study->id;
  print STDERR $PREFIX;
  my $C = 0;

  for my $analysis ($study->analyses) {
    next if $SEEN{Analysis}{$analysis->id}++;
    for my $astep ($analysis->analysissteps) {
      next if $SEEN{AnalysisStep}{$astep->id}++;
      for my $adata ($astep->analyzeddata) {
	next if $SEEN{AnalyzedData}{$adata->id}++;
	$C++;
	print STDERR " $C/$N\r$PREFIX";
	if (my $matrix = $adata->matrix) {
	  next if $SEEN{Matrix}{$matrix->id}++;
	  for my $row ($matrix->rows) {
	    next if $SEEN{MatrixRow}{$row->id}++;
	    $SEEN{TaxonLabel}{$row->taxonlabel->id} = 1 if $row->taxonlabel
	  }
	} elsif (my $tree = $adata->phylotree) {
	  for my $node ($tree->nodes) {
	    next if $SEEN{PhyloTreeNode}{$node->id}++;
	    $SEEN{TaxonLabel}{$node->taxonlabel->id} = 1 if $node->taxonlabel
	  }
	}
      }
    }
  }
  print STDERR "\n";
}

for my $class (sort keys %SEEN) {
  my $classHash = $SEEN{$class};
  for my $id (sort {$a <=> $b} keys %$classHash) {
    if ($classHash->{$id} == 0) {
      print "* $class $id\n";
    }
  }
}


sub get_all_ids {
    my $class = shift;
    my $table = $class->table or croak "Unknown object class '$class'";
    my $id_attr = $class->id_attr or croak "Unknown object class '$class'";
    my $sql = "select $id_attr from $table";
    my $ids = $dbh->selectcol_arrayref($sql);
    return wantarray ? @$ids : $ids;
}

sub get_all {
    my $class = shift;
    my @ids = sort {$a<=>$b} get_all_ids($class);
    my @objs = map { $class->new($_) } @ids;
    return wantarray ? @objs : \@objs;
}
