#!/usr/bin/perl

use strict;
use CIPRES::TreeBase::DBIUtil;
use CIPRES::TreeBase::TreeBaseObjects;
use Getopt::Std;
our $indent = 0;

my $TERMINAL;
if (-t STDOUT) {
    $| = 1;
    $TERMINAL = 1;
}

my %opt;
getopts('chasd:p:RC:X', \%opt) or usage();
if ($opt{X}) { list_known_classes(); }
if ($opt{h}) { usage(); }
if ($opt{R}) {
    if ($opt{d}) { die "-R and -d are incompatible\n"; }
    $opt{d} = 0;
}
if ($opt{c}) {
    if ($opt{C}) { die "-c and -C are inconsistent\n"; }
    $opt{C} = "";  # set, but no classes
}

my %prune = map { $_ => 1 } split /,\s*/, $opt{p};
my $all_consistency_checks = ! defined $opt{C};
my %consistency_check = map { $_ => 1 } split /,\s*/, $opt{C};

if ($opt{s}) {
    # prune out "small" classes
    $prune{$_} = 1 for qw(MatrixRow PhyloTreeNode TaxonLabel MatrixKind TreeType);
}

my $type = shift or usage();
my $id = shift or usage();
$id =~ s/^#//;

my $dbh = CIPRES::TreeBase::DBIUtil->dbh
  or die "Couldn't connect to database: " . DBI->errstr;
CIPRES::TreeBase::TreeBaseObjects->set_db_connection($dbh);
$dbh->{ShowErrorStatement} = 1;
use Carp 'croak';
sub full_str {
    my $self = shift;
    $self->reify;
    my @keys = sort(grep !/[^A-Z]/, keys %$self);
    my @components = map "$_ => $self->{$_}", @keys;
    return join ", ", @components;
}

sub attr_check {
    my ($obj, $attr_name, $attr, $warnings) = @_;
#    warn "checking to see that this object has $attr_name = $attr->{$attr_name}\n";

    # If $attr is just a scalar, fake up an attr hash with one attribute
    unless (ref $attr) {
	$attr = { $attr_name => $attr };
    }

    unless ($warnings || $attr->{warnings}) {
	croak "No warning target variable specified";
    }

    return 1 unless exists $attr->{$attr_name};
    if (not defined $obj->$attr_name) {
	# attribute is missing from the object

	# ... okay, if it is specifically required to be missing
	return 1 if ! defined $attr->{$attr_name};

	# otherwise, record an error
	push @$warnings,
	"Object ". $obj->CIPRES::TreeBase::VeryBadORM::to_str. 
	    " should have $attr_name = $attr->{$attr_name}, ".
	    " but it is missing.";
	return;
    }
	
    return 1 if $obj->$attr_name->id == $attr->{$attr_name};
    push @$warnings,
    "Object ". $obj->CIPRES::TreeBase::VeryBadORM::to_str. 
    " should have $attr_name = $attr->{$attr_name}, ".
    " but instead has " . $obj->$attr_name->id;
    return;
}

my $OK = 1;
my @warnings;
$type->new($id)->dump(action => \&prt, seen => {}, 
		      prune => \%prune,
		      show_all => $opt{a},
		      warnings => \@warnings,
		      attr_check => \&attr_check,
		      defined($opt{d}) ? (maxdepth => $opt{d}) : (),
    );

for my $w (@warnings) {
    print STDERR "*** $w\n";
}
if (! $OK) {
    warn "Inconsistencies detected\n";
    exit 1;
} else {
    exit 0;
}


sub prt {
  my ($self, %attr) = @_;
  my $seen = $attr{seen}{$self->class}{$self->id}++;  
  my $str = $attr{show_all} ? full_str($self) : $self->to_str;
  my $indent = "  " x $attr{depth};
  my $consistent;

  my ($class, $id) = ($self->class, $self->id);

  if (! $seen) {
      my $z;
      if ($TERMINAL) {
	  $z = "(Checking consistency of $class $id.)";
	  print $z, "\r";
      }

      { 
	  my $do_check = $all_consistency_checks || $consistency_check{$class};
	  $consistent = $do_check ? $self->consistent(%attr) : 1;
      }
      
      $OK &&= $consistent;
      if ($TERMINAL) {
	  print " " x length($z), "\r";
      }
  }

  unless ($class->is_nested) {
      if (exists $attr{$class} &&
	  $attr{$class} != $id) {
	  push @{$attr{warnings}}, "** Expected $class $attr{$class}, found $id insead\n";
      }
  }

  my $mark = $seen ? "|-" : $consistent ? "| " : "|*";
  return 0 if $attr{prune}{$self->class};
  print "| " x $attr{depth}, "$mark$str\n";

  return !$seen;
}

sub list_known_classes {
    my $kch = CIPRES::TreeBase::VeryBadORM->known_class_hash();
    for my $k (sort values %$kch) {
	print "$k\n";
    }
    exit 0;
}

sub usage {
    print STDERR qq<Usage: $0 [-X] [-acsR] [-d n] [-pClass1,Class2,...] [-CClasses...] Class IDnumber

Recursively print the contents of the specified object of the
specified class.  For example, "$0 Study 1234" prints out study #1234
and all of its trees, matrices, analyses, etc., and their contents.

Use "$0 -X" for a list of known classes.

Options:
    -a: show *all* attributes of every object (default: pretty-print objects)
    -s: do not recurse into "small" objects (Currently: MatrixRow,
        PhyloTreeNode, TaxonLabel)
    -R: do not recurse at all, printing only the top object
    -c: Skip all consistency checking

    -d n: recurse only n levels deep

    -pClasses... : 'prune': do not display or recurse into objects of these
                    classes. 
    -CClasses... : Perform consistency checking of these classes only
>;
    exit 1;
}


1;
