package org.cipres.treebase.domain.study;

import java.util.List;

import org.cipres.treebase.dao.AbstractDAOTest;

/**
 * The class <code>StudyTest</code> contains tests for the class {@link <code>Study</code>}
 * 
 * @pattern JUnit Test Case
 * 
 * @generatedBy CodePro at 6/7/06 12:05 PM
 * 
 * @author Jin Ruan
 * 
 * @version $Revision$
 */
public class StudyTest extends AbstractDAOTest {

	private StudyHome mStudyHome;

	/**
	 * Return the StudyHome field.
	 * 
	 * @return StudyHome mStudyHome
	 */
	public StudyHome getStudyHome() {
		return mStudyHome;
	}

	/**
	 * Set the StudyHome field.
	 */
	public void setStudyHome(StudyHome pNewStudyHome) {
		mStudyHome = pNewStudyHome;
	}

	/**
	 * Run the void setAuthors(List<Person>) method test
	 */
	public void testSetAuthors() throws Exception {
		String testName = "setAuthors";
		if (logger.isInfoEnabled()) {
			logger.info("\n\t\tRunning Test: " + testName);
		}

		// TODO: after upgrade to Spring 2.0, use startNewTransaction()!!

		// 1. find a citation, associate to new author
		// Citation c = (Citation) loadObject(Citation.class);
		// assertTrue("No citation is found", c != null);
		//
		// List<Person> savedAuthors = c.getAuthors();
		//
		// String newName = testName + "Test " + Math.random();
		// Person p = new Person();
		// p.setFirstName("testF");
		// p.setLastName("testL");
		//
		// String email = "test@cipres.treebase.org";
		// p.setEmailAddressString(email);
		//
		// Person p2 = new Person();
		// p2.setFirstName("test2F");
		// p2.setLastName("test2L");
		//
		// String email2 = "test2@cipres.treebase.org";
		// p2.setEmailAddressString(email2);
		//
		// List<Person> authors = new ArrayList();
		// authors.add(p);
		// authors.add(p2);
		//
		// c.setAuthors(authors);
		//
		// hibernateTemplate.persist(p);
		// hibernateTemplate.persist(p2);
		// hibernateTemplate.update(c);
		//
		// // force commit immeidately, important:
		// setComplete();
		// endTransaction();
		//
		// // 2. verify
		// Long pid = p.getId();
		// Long p2Id = p2.getId();
		//
		// logger.info("person created: " + p.getLastName() + "id = " + pid);
		// logger.info("person created: " + p2.getLastName() + "id = " + p2Id);
		// assertTrue("p is not created." + pid != null);
		// assertTrue("p2 is not created." + p2Id != null);
		//
		// // 3. undo update:
		// // need to call onSetUp() to start a new session/Tx:
		// // onSetUp();
		// startNewTransaction();
		// hibernateTemplate.refresh(c);
		// for (Person oldAuthor : savedAuthors) {
		// hibernateTemplate.merge(oldAuthor);
		// }
		// c.setAuthors(savedAuthors);
		// hibernateTemplate.delete(p);
		// hibernateTemplate.delete(p2);
		// setComplete();
		// endTransaction();
		//
		// // 4. verify p, p2 are removed from db:
		// String sqlStr = "select lastname from person where person_id=";
		//
		// String verifyName = (String) jdbcTemplate.queryForObject(sqlStr + pid, String.class);
		// assertTrue("verify failed.", verifyName == null);
		// verifyName = (String) jdbcTemplate.queryForObject(sqlStr + p2Id, String.class);
		// assertTrue("verify failed.", verifyName == null);

		if (logger.isInfoEnabled()) {
			logger.info(testName + " - end "); //$NON-NLS-1$
		}

	}

	/**
	 * Test get analysis.
	 * 
	 */
	public void testGetAnalyses() throws Exception {
		String testName = "getAnalyses";
		if (logger.isInfoEnabled()) {
			logger.info("\n\t\tRunning Test: " + testName);
		}

		// TODO: after upgrade to Spring 2.0, use startNewTransaction()!!

		// 1. find a study w/ analysis
		Analysis a = (Analysis) loadObject(Analysis.class);
		Study s = a.getStudy();

		assertTrue("No study found", s != null);

		List<Analysis> analyses = s.getAnalyses();

		for (Analysis analysis : analyses) {
			logger.info(" isValidated=" + analysis.getValidated());
		}

		// // 4. verify p, p2 are removed from db:
		// String sqlStr = "select lastname from person where person_id=";
		//
		// String verifyName = (String) jdbcTemplate.queryForObject(sqlStr + pid, String.class);
		// assertTrue("verify failed.", verifyName == null);
		// verifyName = (String) jdbcTemplate.queryForObject(sqlStr + p2Id, String.class);
		// assertTrue("verify failed.", verifyName == null);

		if (logger.isInfoEnabled()) {
			logger.info(testName + " - end "); //$NON-NLS-1$
		}

	}

}

/*
 * $CPS$ This comment was generated by CodePro. Do not edit it. patternId =
 * com.instantiations.assist.eclipse.pattern.testCasePattern strategyId =
 * com.instantiations.assist.eclipse.pattern.testCasePattern.junitTestCase additionalTestNames =
 * assertTrue = false callTestMethod = true createMain = false createSetUp = false createTearDown =
 * false createTestFixture = true createTestStubs = false methods = setAuthors(QList<QPerson;>;)
 * package = org.cipres.treebase.domain.study package.sourceFolder = treebase-core/src/test/java
 * superclassType = junit.framework.TestCase testCase = CitationTest testClassType =
 * org.cipres.treebase.domain.study.Citation
 */